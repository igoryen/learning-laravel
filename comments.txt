1. When GET-request for '/', run the 'home()' method on the Pages controller
2. SELECT * FROM users
3. SELECT * FROM users WHERE user_id = 1
4. SELECT username FROM users WHERE user_id = 1
5. die(var_dump($user));
6. SELECT * FROM users WHERE username != 'igoryen'
7. encrypt the string
8. save the object to the database
9. to override the exception if your table doesn't have the created_at column
10. A way to protect ourselves against mass assignment vulnerabilities.
  These columns are the only ones that can be mass-assigned, i.e. 
  you can use an array to populate these columns in the table
11. SELECT * FROM users ORDER BY username ASC
12. in the /users/ folder, in the index.php file
13. "users.index" means the same as "users/index.php"
14. SELECT * FROM users WHERE username = username LIMIT 1
15. gives you the necessary routes for a RESTful style of development.
  To check all the routes that this gives you, do: 
  Terminal -> php artisan routes
16. Use the correct method names in the controller! 
    index()   sql SELECT  http GET
    create()  sql INSERT  http GET
    store()   sql save    http POST 
    show()    sql SELECT  http GET 
    edit()    sql UPDATE  http GET 
    update()  sql UPDATE  http PATCH
    destroy() sql DELETE  http DELETE
17. The constructor for the UseresController. For the UsersController 
  to function properly, we need a User class object
18. Injecting the User class object through the __constructor of UsersController
19. Filling the attributes
20. Rather than accepting the POSTed data, compare it against its stored
  attributes
21. compare it against its stored attributes